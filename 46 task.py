#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
__________________________________
Кристиан Гольдбах показал, что любое нечетное составное число можно записать 
в виде суммы простого числа и удвоенного квадрата.
9 = 7 + 2×1**2
15 = 7 + 2×2**2
21 = 3 + 2×3**2
25 = 7 + 2×3**2
27 = 19 + 2×2**2
33 = 31 + 2×1**2
Оказалось, что данная гипотеза неверна.
Каково наименьшее нечетное составное число, 
которое нельзя записать в виде суммы простого числа и удвоенного квадрата?
"""


def f_issimple_list(n):
	"""функция принимает число и возвращает сумму простых первых n-чисел 
	создается список длинной n-элементов
	""" 
	simp_list = list(range(n))
	simp_list[1] = 0   # 1-не является простым числом, обнуляем
	for i in simp_list[2:]:   
		for j in range(i+i, len(simp_list), i):
			simp_list[j] = 0    # обнуляем элементы кратные i, начиная с i*2 элемента

	simp_list = list(set(simp_list))[1:]
	simp_list.sort()

	return simp_list


n_stop = 100000
p_list = f_issimple_list(n_stop)


'''
n = p + 2 * k**2
n - не четные числа (range(1, 33, 2),)
p - простые числа
'''
result = 0 

for n in range(1, n_stop, 2):
	if n in p_list:
		continue
	else:
		flg = False
		for k in range(n):
			p = n - 2*k**2   # 
			if p in p_list:   # если p простое число, то гипотеза верна
				break
			elif p < 0:	 # если p<0 запоминаем n-при котором гипотеза не верна
				flg = True
				result = n
				break

		if flg:  # выводим результат 
			print(n)  # 5777
			break