#!/usr/bin/python3
# -*- coding: utf-8 -*-




"""
____________________________
n-ый член последовательности треугольных чисел задается как tn = ½n(n+1). 
Таким образом, первые десять треугольных чисел:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Преобразовывая каждую букву в число, соответствующее ее порядковому номеру в алфавите, 
и складывая эти значения, мы получим числовое значение слова. 
Для примера, числовое значение слова SKY равно 19 + 11 + 25 = 55 = t10. 
Если числовое значение слова является треугольным числом, то мы назовем это слово треугольным словом.

Используя words.txt (щелкнуть правой кнопкой мыши и выбрать 'Save Link/Target As...'), 16 КБ текстовый файл, 
содержащий около двух тысяч часто используемых английских слов, определите, сколько в нем треугольных слов.
"""




def f_alpha_value(string):
	# функция принимает слово в верхнем регистре и возвращает алфавитное значение слова 
    reslt = 0
    for letter in string:
        reslt += alpha_dict[letter]

    return reslt


def f_read_file(filename):
	# чтение из файла, принимает название файла, возвращет отсортированный список 
	strk_list = []

	with open(f'data/{filename}.txt', 'r') as in_file:
		word_list = in_file.read().split(',')

	# сортировка и удаление дополнительных кавычек
	word_list = [x.replace('"', '') for x in word_list]

	return word_list



def f_triple_list(n):
	# функция возвращает True если полученое число является членом треугольной последовательности
	i = 0
	rslt = 0 

	while rslt < n:
		rslt = 1/2 * i * (i+1)
		i += 1

	return True if rslt == n else False




# алфавитный словарь
alpha_dict = {}
for i in range(65, 91):
    alpha_dict[chr(i)] = i - 65 + 1



w_list = f_read_file('p042_words')
tripl_word = [x for x in w_list if f_triple_list( f_alpha_value(x) )]


print(len(tripl_word))


